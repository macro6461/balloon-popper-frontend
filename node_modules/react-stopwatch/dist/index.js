'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _radium = require('radium');

var _radium2 = _interopRequireDefault(_radium);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StopWatch = function (_Component) {
  _inherits(StopWatch, _Component);

  function StopWatch(props) {
    _classCallCheck(this, StopWatch);

    var _this = _possibleConstructorReturn(this, (StopWatch.__proto__ || Object.getPrototypeOf(StopWatch)).call(this, props));

    var hours = props.hours,
        minutes = props.minutes,
        seconds = props.seconds;


    var text = (0, _utils.fillTextWithFormat)(hours, minutes, seconds);

    _this.intervalId = setInterval(function () {}, Number.MAX_VALUE);
    _this.state = {
      text: text,
      stateHours: hours,
      stateMinutes: minutes,
      stateSeconds: seconds
    };
    return _this;
  }

  _createClass(StopWatch, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps() {
      this.intervalId = setInterval(function () {}, Number.MAX_VALUE);
      this.setState({
        stateHours: 0,
        stateMinutes: 0,
        stateSeconds: 0
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.timer();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.stopToCount();
    }
  }, {
    key: 'stopToCount',
    value: function stopToCount() {
      clearInterval(this.intervalId);
    }
  }, {
    key: 'counter',
    value: function counter() {
      var _this2 = this;

      var _props = this.props,
          limit = _props.limit,
          withLoop = _props.withLoop,
          onCallback = _props.onCallback;
      var _state = this.state,
          stateHours = _state.stateHours,
          stateMinutes = _state.stateMinutes,
          stateSeconds = _state.stateSeconds;


      this.setState(function (prevState) {
        return {
          stateSeconds: prevState.stateSeconds + 1
        };
      });
      if (stateSeconds >= 59) {
        this.setState(function (prevState) {
          return {
            stateSeconds: 0,
            stateMinutes: prevState.stateMinutes + 1
          };
        });

        if (stateMinutes >= 59) {
          this.setState(function (prevState) {
            return {
              stateMinutes: 0,
              stateHours: prevState.stateHours + 1
            };
          });
        }
      }

      var text = (0, _utils.fillTextWithFormat)(stateHours, stateMinutes, stateSeconds);

      this.setState({
        text: text
      });

      if (limit === text) {
        setTimeout(function () {
          _this2.stopToCount();
          if (withLoop) {
            _this2.timer();
          }
          onCallback();
        }, 0);
      }
    }
  }, {
    key: 'timer',
    value: function timer() {
      var _this3 = this;

      // @slorenzo: setInterval return a number.
      var intervalId = setInterval(function () {
        _this3.counter();
      }, 1000);

      this.intervalId = intervalId;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          defaultStyles = _props2.defaultStyles,
          theme = _props2.theme,
          custom = _props2.custom;
      var text = this.state.text;


      var custumStyles = _lodash2.default.defaults(custom, {
        containerOutter: {},
        containerInner: {}
      });

      return _react2.default.createElement(
        'div',
        {
          style: [defaultStyles.base, defaultStyles[theme].containerOutter, custumStyles.containerOutter]
        },
        _react2.default.createElement(
          'div',
          {
            style: [defaultStyles[theme].containerInner, custumStyles.containerInner]
          },
          _react2.default.createElement(
            'h3',
            null,
            text
          )
        )
      );
    }
  }]);

  return StopWatch;
}(_react.Component);

StopWatch.defaultProps = {
  defaultStyles: {
    base: {
      fontSize: '18px',
      display: 'inline-block',
      height: '150px',
      width: '150px'
    },
    primary: {
      containerOutter: {
        background: '#0f222b',
        borderRadius: '50%',
        border: '2px solid #8bc34a',
        margin: 'auto',
        top: '0',
        right: '0',
        bottom: '0',
        left: '0',
        position: 'absolute'
      },
      containerInner: {
        color: '#69ca62',
        textAlign: 'center',
        lineHeight: '5'
      }
    },
    secondary: {
      containerOutter: {
        background: '#122129',
        border: '2px solid #8bc34a',
        margin: 'auto',
        top: '0',
        right: '0',
        bottom: '0',
        left: '0',
        position: 'absolute'
      },
      containerInner: {
        color: '#2dba77',
        textAlign: 'center',
        lineHeight: '5'
      }
    }
  },
  custom: {},
  theme: 'primary',
  withLoop: false,
  onCallback: function onCallback() {}
};
exports.default = (0, _radium2.default)(StopWatch);